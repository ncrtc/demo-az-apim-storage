{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "prefix": {
            "type": "string",
            "defaultValue": "def",
            "maxLength": 11,
            "metadata": {
                "description": "Name for the Azure Storage Account - must be unique"
            }
        },
        "storageType": {
            "type": "string",
            "allowedValues": [
                "Storage",
                "StorageV2",
                "BlobStorage",
                "FileStorage",
                "BlockBlobStorage"
            ],
            "defaultValue": "StorageV2",
            "metadata": {
                "description": "Specify the kind of Azure Storage Account"
            }
        },
        "storageSKU": {
            "type": "string",
            "allowedValues": [
                "Standard_LRS",
                "Standard_ZRS",
                "Standard_GRS",
                "Standard_RAGRS",
                "Premium_LRS"
            ],
            "defaultValue": "Standard_LRS",
            "metadata": {
                "description": "SKU of the storage account"
            }
        },
        "adminEmail": {
            "type": "string",
            "metadata": {
                "description": "Email address to be associated with APIM."
            }
        },
        "orgName": {
            "type": "string",
            "metadata": {
                "description": "Org name to be associated with APIM."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        }                
    },
    "variables": {
        "storageAccountName": "[toLower(concat(parameters('prefix'),uniqueString(resourceGroup().id)))]",
        "apimName": "[toLower(concat(parameters('prefix'),uniqueString(resourceGroup().id)))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-07-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('storageSKU')]"
            },
            "kind": "[parameters('storageType')]",
            "tags": {
            }
        },
        {
            "apiVersion": "2019-01-01",
            "name": "[variables('apimName')]",
            "location": "[parameters('location')]",
            "type": "Microsoft.ApiManagement/service",
            "sku": {
                "name": "Consumption"
            },
            "properties": {
                "publisherEmail": "[parameters('adminEmail')]",
                "publisherName": "[parameters('orgName')]"
            }
        },
        {
            "type": "Microsoft.ApiManagement/service/apis",
            "name": "[concat(variables('apimName'), '/blob')]",
            "apiVersion": "2017-03-01",
            "properties": {
              "displayName": "blob",
              "description": "",
              "path": "/blob",
              "protocols": [
                "https"
              ],
              "authenticationSettings": {
                "oAuth2": null,
                "openid": null
              },
              "subscriptionKeyParameterNames": {}
            },
            "resources": [
              {
                "type": "Microsoft.ApiManagement/service/apis/operations",
                "name": "[concat(variables('apimName'), '/blob/get')]",
                "apiVersion": "2017-03-01",
                "properties": {
                  "displayName": "GET",
                  "method": "GET",
                  "urlTemplate": "/*",
                  "templateParameters": [],
                  "description": "",
                  "request": {
                    "queryParameters": [],
                    "headers": [],
                    "representations": []
                  },
                  "responses": [
                    {
                      "statusCode": 200,
                      "description": "",
                      "representations": [],
                      "headers": []
                    },
                    {
                      "statusCode": 500,
                      "description": "",
                      "representations": [],
                      "headers": []
                    },
                    {
                      "statusCode": 400,
                      "description": "",
                      "representations": [],
                      "headers": []
                    }
                  ],
                  "policies": null
                },
                "resources": [
                  {
                    "type": "Microsoft.ApiManagement/service/apis/operations/policies",
                    "name": "[concat(variables('apimName'), '/blob/get/', 'policy')]",
                    "apiVersion": "2017-03-01",
                    "properties": {
                      "policyContent": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.\r\n-->\r\n<policies>\r\n    <inbound>\r\n        <set-variable name='UTCNow' value='@(DateTime.UtcNow.ToString('R'))' />\r\n        <set-variable name='StorageAccountName' value='YOUR_STORAGE_ACCOUNT_NAME_HERE' />\r\n        <set-variable name='ContainerName' value='YOUR_STORAGE_CONTAINER_NAME_HERE' />\r\n        <set-variable name='BlobName' value='@(context.Request.Url.Path.Replace('/YOUR_STORAGE_CONTAINER_NAME_HERE/', ''))' />\r\n        <set-variable name='StringToSign' value='@{\r\n            string storageAccountName = context.Variables.GetValueOrDefault<string>('StorageAccountName');\r\n            string containerName = context.Variables.GetValueOrDefault<string>('ContainerName');\r\n            string blobName = context.Variables.GetValueOrDefault<string>('BlobName');\r\n            string contentLength = context.Request.Headers.GetValueOrDefault('Content-Length');\r\n            string ContentType = context.Request.Headers.GetValueOrDefault('Content-Type');\r\n            string dateToSign = context.Variables.GetValueOrDefault<string>('UTCNow');\r\n            string headerResource = $'x-ms-date:{dateToSign}\nx-ms-version:2017-04-17';\r\n            string urlResource = $'/{storageAccountName}/{containerName}/{blobName}';\r\n            return $'GET\n\n\n{contentLength}\n\n{ContentType}\n\n\n\n\n\n\n{headerResource}\n{urlResource}';            \r\n        }' />\r\n        <base />\r\n        <set-header name='Authorization' exists-action='override'>\r\n            <value>@{\r\n                    string stringToSign = context.Variables.GetValueOrDefault<string>('StringToSign');\r\n                    string storageKey = 'YOUR_STORAGE_ACCESS_KEY_HERE';\r\n\r\n                    HMACSHA256 hmac = new HMACSHA256(Convert.FromBase64String(storageKey));\r\n                    string signature = Convert.ToBase64String(hmac.ComputeHash(Encoding.UTF8.GetBytes(stringToSign)));\r\n                    return String.Format('{0} {1}:{2}', 'SharedKey', context.Variables.GetValueOrDefault<string>('StorageAccountName'), signature);\r\n                }</value>\r\n        </set-header>\r\n        <set-header name='x-ms-date' exists-action='override'>\r\n            <value>@(context.Variables.GetValueOrDefault<string>('UTCNow'))</value>\r\n        </set-header>\r\n        <set-header name='x-ms-version' exists-action='override'>\r\n            <value>2017-04-17</value>\r\n        </set-header>\r\n        <set-backend-service base-url='@{\r\n            string storageAccountName = context.Variables.GetValueOrDefault<string>('StorageAccountName');\r\n            string containerName = context.Variables.GetValueOrDefault<string>('ContainerName');\r\n            return $'https://{storageAccountName}.blob.core.windows.net/{containerName}';\r\n        }' />\r\n    </inbound>\r\n    <backend>\r\n        <base />\r\n    </backend>\r\n    <outbound>\r\n        <base />\r\n    </outbound>\r\n    <on-error>\r\n        <base />\r\n    </on-error>\r\n</policies>"
                    },
                    "resources": [],
                    "dependsOn": [
                      "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName') ,'/blob')]",
                      "[resourceId('Microsoft.ApiManagement/service/apis/operations', variables('apimName'), parameters('api_b2c').name, '/get')]"
                    ]
                  }
                ],
                "dependsOn": [
                  "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName'), '/blob)]"
                ]
              },
              {
                "type": "Microsoft.ApiManagement/service/apis/policies",
                "name": "[concat(variables('apimName'), '/blob', '/', 'policy')]",
                "apiVersion": "2017-03-01",
                "properties": {
                  "policyContent": "<!--\r\n    IMPORTANT:\r\n    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.\r\n    - Only the <forward-request> policy element can appear within the <backend> section element.\r\n    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.\r\n    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.\r\n    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.\r\n    - To remove a policy, delete the corresponding policy statement from the policy document.\r\n    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.\r\n    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.\r\n    - Policies are applied in the order of their appearance, from the top down.\r\n-->\r\n<policies>\r\n  <inbound>\r\n    <base />\r\n    <set-header name=\"Ocp-Apim-Subscription-Key\" exists-action=\"delete\" />\r\n  </inbound>\r\n  <backend>\r\n    <base />\r\n  </backend>\r\n  <outbound>\r\n    <base />\r\n  </outbound>\r\n  <on-error>\r\n    <base />\r\n  </on-error>\r\n</policies>"
                },
                "resources": [],
                "dependsOn": [
                  "[resourceId('Microsoft.ApiManagement/service/apis', variables('apimName') , '/blob')]"
                ]
              }
            ]
          }
    ],
    "outputs": {
        "storageAccount": {
            "type": "string",
            "value": "[variables('storageAccountName')]"
        }
    }
}